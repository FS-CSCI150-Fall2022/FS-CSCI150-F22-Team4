{"version":3,"file":"node_modules_ionic_core_dist_esm_ion-datetime-button_entry_js.js","mappings":"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","sources":["./node_modules/@ionic/core/dist/esm/ion-datetime-button.entry.js"],"sourcesContent":["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { r as registerInstance, h, H as Host, i as getElement } from './index-8e692445.js';\r\nimport { b as getIonMode } from './ionic-global-c95cf239.js';\r\nimport { a as addEventListener, c as componentOnReady } from './helpers-2914b3be.js';\r\nimport { p as printIonWarning, b as printIonError } from './index-c4b11676.js';\r\nimport { c as createColorClasses } from './theme-7670341c.js';\r\nimport { p as parseDate, f as getToday, H as is24Hour, Q as getLocalizedDateTime, E as getMonthAndYear, I as getLocalizedTime, R as getMonthDayAndYear } from './parse-250f021a.js';\r\n\r\nconst iosDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\r\n\r\nconst mdDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\r\n\r\nconst DatetimeButton = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.datetimeEl = null;\r\n    this.overlayEl = null;\r\n    this.datetimePresentation = 'date-time';\r\n    this.datetimeActive = false;\r\n    /**\r\n     * The color to use from your application's color palette.\r\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\r\n     * For more information on colors, see [theming](/docs/theming/basics).\r\n     */\r\n    this.color = 'primary';\r\n    /**\r\n     * If `true`, the user cannot interact with the button.\r\n     */\r\n    this.disabled = false;\r\n    /**\r\n     * Check the value property on the linked\r\n     * ion-datetime and then format it according\r\n     * to the locale specified on ion-datetime.\r\n     */\r\n    this.setDateTimeText = () => {\r\n      const { datetimeEl, datetimePresentation } = this;\r\n      if (!datetimeEl) {\r\n        return;\r\n      }\r\n      const { value, locale, hourCycle, preferWheel, multiple } = datetimeEl;\r\n      if (multiple) {\r\n        printIonWarning(`Multi-date selection cannot be used with ion-datetime-button.\r\n\r\nPlease upvote https://github.com/ionic-team/ionic-framework/issues/25668 if you are interested in seeing this functionality added.\r\n      `, this.el);\r\n        return;\r\n      }\r\n      /**\r\n       * Both ion-datetime and ion-datetime-button default\r\n       * to today's date and time if no value is set.\r\n       */\r\n      const parsedDatetime = parseDate(value || getToday());\r\n      const use24Hour = is24Hour(locale, hourCycle);\r\n      // TODO(FW-1865) - Remove once FW-1831 is fixed.\r\n      parsedDatetime.tzOffset = undefined;\r\n      this.dateText = this.timeText = undefined;\r\n      switch (datetimePresentation) {\r\n        case 'date-time':\r\n        case 'time-date':\r\n          const dateText = getMonthDayAndYear(locale, parsedDatetime);\r\n          const timeText = getLocalizedTime(locale, parsedDatetime, use24Hour);\r\n          if (preferWheel) {\r\n            this.dateText = `${dateText} ${timeText}`;\r\n          }\r\n          else {\r\n            this.dateText = dateText;\r\n            this.timeText = timeText;\r\n          }\r\n          break;\r\n        case 'date':\r\n          this.dateText = getMonthDayAndYear(locale, parsedDatetime);\r\n          break;\r\n        case 'time':\r\n          this.timeText = getLocalizedTime(locale, parsedDatetime, use24Hour);\r\n          break;\r\n        case 'month-year':\r\n          this.dateText = getMonthAndYear(locale, parsedDatetime);\r\n          break;\r\n        case 'month':\r\n          this.dateText = getLocalizedDateTime(locale, parsedDatetime, { month: 'long' });\r\n          break;\r\n        case 'year':\r\n          this.dateText = getLocalizedDateTime(locale, parsedDatetime, { year: 'numeric' });\r\n          break;\r\n      }\r\n    };\r\n    /**\r\n     * Waits for the ion-datetime to re-render.\r\n     * This is needed in order to correctly position\r\n     * a popover relative to the trigger element.\r\n     */\r\n    this.waitForDatetimeChanges = async () => {\r\n      const { datetimeEl } = this;\r\n      if (!datetimeEl) {\r\n        return Promise.resolve();\r\n      }\r\n      return new Promise((resolve) => {\r\n        addEventListener(datetimeEl, 'ionRender', resolve, { once: true });\r\n      });\r\n    };\r\n    this.handleDateClick = async (ev) => {\r\n      const { datetimeEl, datetimePresentation } = this;\r\n      if (!datetimeEl) {\r\n        return;\r\n      }\r\n      let needsPresentationChange = false;\r\n      /**\r\n       * When clicking the date button,\r\n       * we need to make sure that only a date\r\n       * picker is displayed. For presentation styles\r\n       * that display content other than a date picker,\r\n       * we need to update the presentation style.\r\n       */\r\n      switch (datetimePresentation) {\r\n        case 'date-time':\r\n        case 'time-date':\r\n          const needsChange = datetimeEl.presentation !== 'date';\r\n          /**\r\n           * The date+time wheel picker\r\n           * shows date and time together,\r\n           * so do not adjust the presentation\r\n           * in that case.\r\n           */\r\n          if (!datetimeEl.preferWheel && needsChange) {\r\n            datetimeEl.presentation = 'date';\r\n            needsPresentationChange = true;\r\n          }\r\n          break;\r\n      }\r\n      /**\r\n       * Track which button was clicked\r\n       * so that it can have the correct\r\n       * activated styles applied when\r\n       * the modal/popover containing\r\n       * the datetime is opened.\r\n       */\r\n      this.selectedButton = 'date';\r\n      this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\r\n    };\r\n    this.handleTimeClick = (ev) => {\r\n      const { datetimeEl, datetimePresentation } = this;\r\n      if (!datetimeEl) {\r\n        return;\r\n      }\r\n      let needsPresentationChange = false;\r\n      /**\r\n       * When clicking the time button,\r\n       * we need to make sure that only a time\r\n       * picker is displayed. For presentation styles\r\n       * that display content other than a time picker,\r\n       * we need to update the presentation style.\r\n       */\r\n      switch (datetimePresentation) {\r\n        case 'date-time':\r\n        case 'time-date':\r\n          const needsChange = datetimeEl.presentation !== 'time';\r\n          if (needsChange) {\r\n            datetimeEl.presentation = 'time';\r\n            needsPresentationChange = true;\r\n          }\r\n          break;\r\n      }\r\n      /**\r\n       * Track which button was clicked\r\n       * so that it can have the correct\r\n       * activated styles applied when\r\n       * the modal/popover containing\r\n       * the datetime is opened.\r\n       */\r\n      this.selectedButton = 'time';\r\n      this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\r\n    };\r\n    /**\r\n     * If the datetime is presented in an\r\n     * overlay, the datetime and overlay\r\n     * should be appropriately sized.\r\n     * These classes provide default sizing values\r\n     * that developers can customize.\r\n     * The goal is to provide an overlay that is\r\n     * reasonably sized with a datetime that\r\n     * fills the entire container.\r\n     */\r\n    this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\r\n      const { overlayEl } = this;\r\n      if (!overlayEl) {\r\n        return;\r\n      }\r\n      if (overlayEl.tagName === 'ION-POPOVER') {\r\n        /**\r\n         * When the presentation on datetime changes,\r\n         * we need to wait for the component to re-render\r\n         * otherwise the computed width/height of the\r\n         * popover content will be wrong, causing\r\n         * the popover to not align with the trigger element.\r\n         */\r\n        if (needsPresentationChange) {\r\n          await this.waitForDatetimeChanges();\r\n        }\r\n        /**\r\n         * We pass the trigger button element\r\n         * so that the popover aligns with the individual\r\n         * button that was clicked, not the component container.\r\n         */\r\n        overlayEl.present(Object.assign(Object.assign({}, ev), { detail: {\r\n            ionShadowTarget: triggerEl,\r\n          } }));\r\n      }\r\n      else {\r\n        overlayEl.present();\r\n      }\r\n    };\r\n  }\r\n  async componentWillLoad() {\r\n    const { datetime } = this;\r\n    if (!datetime) {\r\n      printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\r\n      return;\r\n    }\r\n    const datetimeEl = (this.datetimeEl = document.getElementById(datetime));\r\n    if (!datetimeEl) {\r\n      printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\r\n      return;\r\n    }\r\n    /**\r\n     * Since the datetime can be used in any context (overlays, accordion, etc)\r\n     * we track when it is visible to determine when it is active.\r\n     * This informs which button is highlighted as well as the\r\n     * aria-expanded state.\r\n     */\r\n    const io = new IntersectionObserver((entries) => {\r\n      const ev = entries[0];\r\n      this.datetimeActive = ev.isIntersecting;\r\n    }, {\r\n      threshold: 0.01,\r\n    });\r\n    io.observe(datetimeEl);\r\n    /**\r\n     * Get a reference to any modal/popover\r\n     * the datetime is being used in so we can\r\n     * correctly size it when it is presented.\r\n     */\r\n    const overlayEl = (this.overlayEl = datetimeEl.closest('ion-modal, ion-popover'));\r\n    /**\r\n     * The .ion-datetime-button-overlay class contains\r\n     * styles that allow any modal/popover to be\r\n     * sized according to the dimensions of the datetime.\r\n     * If developers want a smaller/larger overlay all they need\r\n     * to do is change the width/height of the datetime.\r\n     * Additionally, this lets us avoid having to set\r\n     * explicit widths on each variant of datetime.\r\n     */\r\n    if (overlayEl) {\r\n      overlayEl.classList.add('ion-datetime-button-overlay');\r\n    }\r\n    componentOnReady(datetimeEl, () => {\r\n      const datetimePresentation = (this.datetimePresentation = datetimeEl.presentation || 'date-time');\r\n      /**\r\n       * Set the initial display\r\n       * in the rendered buttons.\r\n       *\r\n       * From there, we need to listen\r\n       * for ionChange to be emitted\r\n       * from datetime so we know when\r\n       * to re-render the displayed\r\n       * text in the buttons.\r\n       */\r\n      this.setDateTimeText();\r\n      addEventListener(datetimeEl, 'ionChange', this.setDateTimeText);\r\n      /**\r\n       * Configure the initial selected button\r\n       * in the event that the datetime is displayed\r\n       * without clicking one of the datetime buttons.\r\n       * For example, a datetime could be expanded\r\n       * in an accordion. In this case users only\r\n       * need to click the accordion header to show\r\n       * the datetime.\r\n       */\r\n      switch (datetimePresentation) {\r\n        case 'date-time':\r\n        case 'date':\r\n        case 'month-year':\r\n        case 'month':\r\n        case 'year':\r\n          this.selectedButton = 'date';\r\n          break;\r\n        case 'time-date':\r\n        case 'time':\r\n          this.selectedButton = 'time';\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  render() {\r\n    const { color, dateText, timeText, selectedButton, datetimeActive, disabled } = this;\r\n    const mode = getIonMode(this);\r\n    return (h(Host, { class: createColorClasses(color, {\r\n        [mode]: true,\r\n        [`${selectedButton}-active`]: datetimeActive,\r\n        ['datetime-button-disabled']: disabled,\r\n      }) }, dateText && (h(\"button\", { class: \"ion-activatable\", id: \"date-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleDateClick, disabled: disabled, part: \"native\", ref: (el) => (this.dateTargetEl = el) }, h(\"slot\", { name: \"date-target\" }, dateText), mode === 'md' && h(\"ion-ripple-effect\", null))), timeText && (h(\"button\", { class: \"ion-activatable\", id: \"time-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleTimeClick, disabled: disabled, part: \"native\", ref: (el) => (this.timeTargetEl = el) }, h(\"slot\", { name: \"time-target\" }, timeText), mode === 'md' && h(\"ion-ripple-effect\", null)))));\r\n  }\r\n  get el() { return getElement(this); }\r\n};\r\nDatetimeButton.style = {\r\n  ios: iosDatetimeButtonCss,\r\n  md: mdDatetimeButtonCss\r\n};\r\n\r\nexport { DatetimeButton as ion_datetime_button };\r\n"],"names":["r","registerInstance","h","H","Host","i","getElement","b","getIonMode","a","addEventListener","c","componentOnReady","p","printIonWarning","printIonError","createColorClasses","parseDate","f","getToday","is24Hour","Q","getLocalizedDateTime","E","getMonthAndYear","I","getLocalizedTime","R","getMonthDayAndYear","iosDatetimeButtonCss","mdDatetimeButtonCss","DatetimeButton","constructor","hostRef","datetimeEl","overlayEl","datetimePresentation","datetimeActive","color","disabled","setDateTimeText","value","locale","hourCycle","preferWheel","multiple","el","parsedDatetime","use24Hour","tzOffset","undefined","dateText","timeText","month","year","waitForDatetimeChanges","Promise","resolve","once","handleDateClick","ev","needsPresentationChange","needsChange","presentation","selectedButton","presentOverlay","dateTargetEl","handleTimeClick","timeTargetEl","triggerEl","tagName","present","Object","assign","detail","ionShadowTarget","componentWillLoad","datetime","document","getElementById","io","IntersectionObserver","entries","isIntersecting","threshold","observe","closest","classList","add","render","mode","class","id","onClick","part","ref","name","style","ios","md","ion_datetime_button"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}